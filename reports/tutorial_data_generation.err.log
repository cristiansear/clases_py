Traceback (most recent call last):
  File "C:\Anaconda\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Anaconda\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Anaconda\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Anaconda\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Anaconda\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Anaconda\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Anaconda\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Anaconda\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
all_data_ta = {}
for year in range( 2015, 2020 ):
    print(f"{year}")
    
    # read REC0111 data
    endes1 = pd.read_spss( fr"../_data/endes/{year}/REC0111.sav" )

    # Get labels from sav file
    with sav.SavHeaderReader( fr"../_data/endes/{year}/REC0111.sav", ioUtf8=True) as header:
        metadata = header.all()

    # Filtering columns
    # new pandas with selected columns
    endes1_1 = endes1.loc[ : , col1 ]
    # generate the year column
    endes1_1[ 'year' ] = year

    # variables labels
    var_labels = metadata.varLabels.copy()
    # variables kyes
    var_labels_keys = var_labels.keys()
    # Values labels
    value_labels = metadata.valueLabels.copy()
    # Values keys
    value_labels_keys = value_labels.keys()

    # Filtered variables
    new_var_labels1 = {}
    new_value_labels1 = {}
    # New variable and value labels
    for key in endes1_1.columns:

        if key in var_labels_keys:
            new_var_labels1[ f'{key}' ] = var_labels[ f'{key}' ]

        if key in value_labels_keys:
            new_value_labels1[ f'{key}' ] = value_labels[ f'{key}' ]
    
    # update Year of the survey to the dictionary
    new_var_labels1['year'] = "Year of the survey"
    
            
            
            
    
    
    
    # read RE223132 data
    endes2 = pd.read_spss( fr"../_data/endes/{year}/RE223132.sav" )

    # Get labels from sav file
    with sav.SavHeaderReader( fr"../_data/endes/{year}/RE223132.sav", ioUtf8=True) as header:
        metadata = header.all()
    
    # Selecting Specific Columns
    endes2_1 = endes2.loc[ : ,col2 ]
    
    # variables labels
    var_labels = metadata.varLabels.copy()
    # variables kyes
    var_labels_keys = var_labels.keys()
    # Values labels
    value_labels = metadata.valueLabels.copy()
    # Values keys
    value_labels_keys = value_labels.keys()

    # Filtered variables
    new_var_labels2 = {}
    new_value_labels2 = {}
    # New variable and value labels
    for key in endes2_1.columns:

        if key in var_labels_keys:
            new_var_labels2[ f'{key}' ] = var_labels[ f'{key}' ]

        if key in value_labels_keys:
            new_value_labels2[ f'{key}' ] = value_labels[ f'{key}' ]
    
    
    
    
    # read RE516171 data    
    endes3 = pd.read_spss( fr"../_data/endes/{year}/RE516171.sav" )

    # Get labels from sav file
    with sav.SavHeaderReader( fr"../_data/endes/{year}/RE516171.sav", ioUtf8=True) as header:
        metadata = header.all()

    # Filter columns
    endes3_1 = endes3.loc[ : , col3 ].copy()

    # variables labels
    var_labels = metadata.varLabels.copy()
    # variables kyes
    var_labels_keys = var_labels.keys()
    # Values labels
    value_labels = metadata.valueLabels.copy()
    # Values keys
    value_labels_keys = value_labels.keys()

    # Filtered variables
    new_var_labels3 = {}
    new_value_labels3 = {}
    # New variable and value labels
    for key in endes3_1.columns:

        if key in var_labels_keys:
            new_var_labels3[ f'{key}' ] = var_labels[ f'{key}' ]

        if key in value_labels_keys:
            new_value_labels3[ f'{key}' ] = value_labels[ f'{key}' ]
            
    
    
    # Merging data
    endes = endes1_1.merge( 
                endes2_1, 
                on = 'CASEID', 
                how = 'left', 
                validate = "1:1" 
              ).merge( 
                    endes3_1, 
                    on = 'CASEID', 
                    how = 'left', 
                    validate = "1:1" 
                    )
    
    # Concatenate all var labels
    new_var_labels1.update( new_var_labels2 )
    new_var_labels1.update( new_var_labels3 )
    var_labels = new_var_labels1.copy()

    # Concatenate all value labels
    new_value_labels1.update( new_value_labels2 )
    new_value_labels1.update( new_value_labels3 )
    value_labels = new_value_labels1.copy()
    
    # Store all values
    store_values = {"data" : endes , 
                      "var_labels" : var_labels, 
                      "value_labels" : value_labels
                    }
    all_data_ta[ f'year_{year}'] = store_values
    
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mPyreadstatError[0m                           Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_4576\3332961304.py[0m in [0;36m<module>[1;34m[0m
[0;32m      4[0m [1;33m[0m[0m
[0;32m      5[0m     [1;31m# read REC0111 data[0m[1;33m[0m[1;33m[0m[0m
[1;32m----> 6[1;33m     [0mendes1[0m [1;33m=[0m [0mpd[0m[1;33m.[0m[0mread_spss[0m[1;33m([0m [1;34mfr"../_data/endes/{year}/REC0111.sav"[0m [1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m      7[0m [1;33m[0m[0m
[0;32m      8[0m     [1;31m# Get labels from sav file[0m[1;33m[0m[1;33m[0m[0m

[1;32mC:\Anaconda\lib\site-packages\pandas\io\spss.py[0m in [0;36mread_spss[1;34m(path, usecols, convert_categoricals)[0m
[0;32m     44[0m             [0musecols[0m [1;33m=[0m [0mlist[0m[1;33m([0m[0musecols[0m[1;33m)[0m  [1;31m# pyreadstat requires a list[0m[1;33m[0m[1;33m[0m[0m
[0;32m     45[0m [1;33m[0m[0m
[1;32m---> 46[1;33m     df, _ = pyreadstat.read_sav(
[0m[0;32m     47[0m         [0mstringify_path[0m[1;33m([0m[0mpath[0m[1;33m)[0m[1;33m,[0m [0musecols[0m[1;33m=[0m[0musecols[0m[1;33m,[0m [0mapply_value_formats[0m[1;33m=[0m[0mconvert_categoricals[0m[1;33m[0m[1;33m[0m[0m
[0;32m     48[0m     )

[1;32mpyreadstat\pyreadstat.pyx[0m in [0;36mpyreadstat.pyreadstat.read_sav[1;34m()[0m

[1;32mpyreadstat\_readstat_parser.pyx[0m in [0;36mpyreadstat._readstat_parser.run_conversion[1;34m()[0m

[1;31mPyreadstatError[0m: File ../_data/endes/2015/REC0111.sav does not exist!
PyreadstatError: File ../_data/endes/2015/REC0111.sav does not exist!

